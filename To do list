#include <iostream>
#include <vector>
using namespace std;

// Function to display the to-do list
void displayTasks(const vector<pair<string, bool>>& tasks) {
    if (tasks.empty()) {
        cout << "Your to-do list is empty!" << endl;
    } else {
        cout << "\nYour To-Do List:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << (tasks[i].second ? "[Completed] " : "[Pending] ") << tasks[i].first << endl;
        }
    }
}

// Function to add a task to the list
void addTask(vector<pair<string, bool>>& tasks) {
    string task;
    cout << "Enter the task: ";
    cin.ignore();
    getline(cin, task);
    tasks.push_back({task, false});
    cout << "Task added successfully!" << endl;
}

// Function to mark a task as completed
void completeTask(vector<pair<string, bool>>& tasks) {
    int taskNumber;
    displayTasks(tasks);
    
    if (!tasks.empty()) {
        cout << "Enter the number of the task you have completed: ";
        cin >> taskNumber;
        
        if (taskNumber > 0 && taskNumber <= tasks.size()) {
            tasks[taskNumber - 1].second = true;
            cout << "Task marked as completed!" << endl;
        } else {
            cout << "Invalid task number!" << endl;
        }
    }
}

int main() {
    vector<pair<string, bool>> tasks; // Pair to store task description and completion status
    int choice;

    do {
        // Display menu options
        cout << "\nTo-Do List Menu:" << endl;
        cout << "1. Add a Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark a Task as Completed" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                displayTasks(tasks);
                break;
            case 3:
                completeTask(tasks);
                break;
            case 4:
                cout << "Exiting the To-Do List program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
#include <iostream>
#include <vector>
using namespace std;

// Function to display the to-do list
void displayTasks(const vector<pair<string, bool>>& tasks) {
    if (tasks.empty()) {
        cout << "Your to-do list is empty!" << endl;
    } else {
        cout << "\nYour To-Do List:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << (tasks[i].second ? "[Completed] " : "[Pending] ") << tasks[i].first << endl;
        }
    }
}

// Function to add a task to the list
void addTask(vector<pair<string, bool>>& tasks) {
    string task;
    cout << "Enter the task: ";
    cin.ignore();
    getline(cin, task);
    tasks.push_back({task, false});
    cout << "Task added successfully!" << endl;
}

// Function to mark a task as completed
void completeTask(vector<pair<string, bool>>& tasks) {
    int taskNumber;
    displayTasks(tasks);
    
    if (!tasks.empty()) {
        cout << "Enter the number of the task you have completed: ";
        cin >> taskNumber;
        
        if (taskNumber > 0 && taskNumber <= tasks.size()) {
            tasks[taskNumber - 1].second = true;
            cout << "Task marked as completed!" << endl;
        } else {
            cout << "Invalid task number!" << endl;
        }
    }
}

int main() {
    vector<pair<string, bool>> tasks; // Pair to store task description and completion status
    int choice;

    do {
        // Display menu options
        cout << "\nTo-Do List Menu:" << endl;
        cout << "1. Add a Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark a Task as Completed" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                displayTasks(tasks);
                break;
            case 3:
                completeTask(tasks);
                break;
            case 4:
                cout << "Exiting the To-Do List program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
